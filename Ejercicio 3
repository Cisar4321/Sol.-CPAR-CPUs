#Parte a
osboxes@osboxes:~/EssentialsOfParallelComputing$ cd Chapter6/

osboxes@osboxes:~/EssentialsOfParallelComputing/Chapter6$ ls

autovec                 docker_run.sh            mass_sum

autovec_function        dockervnc.sh             README.autovirtualbox

autovec_restrict        FindVector.cmake         README.docker

autovirtualbox.sh       GlobalSumsVectorized     README.md

COPYRIGHT               image                    README.virtualbox

dockerbash.sh           IntelBasekitPackageList  Setup.Ubuntu20.04

docker_cleanup.sh       IntelHPCkitPackageList   stencil

Dockerfile              LICENSE                  timestep

Dockerfile.Ubuntu20.04  License.txt

Dockerfile.vnc          Makefile





#Parte b
osboxes@osboxes:~/EssentialsOfParallelComputing/Chapter6$ cd mass_sum

osboxes@osboxes:~/EssentialsOfParallelComputing/Chapter6/mass_sum$ ls

CMakeLists.txt  main.c  mass_sum.c  mass_sum.h

osboxes@osboxes:~/EssentialsOfParallelComputing/Chapter6/mass_sum$ ls

CMakeLists.txt  main.c  mass_sum.c  mass_sum.h

osboxes@osboxes:~/EssentialsOfParallelComputing/Chapter6/mass_sum$ cd CMakeLists.txt

bash: cd: CMakeLists.txt: Not a directory

osboxes@osboxes:~/EssentialsOfParallelComputing/Chapter6/mass_sum$ nano CMakeLists.txt

osboxes@osboxes:~/EssentialsOfParallelComputing/Chapter6/mass_sum$ ls

CMakeLists.txt  main.c  mass_sum.c  mass_sum.h

osboxes@osboxes:~/EssentialsOfParallelComputing/Chapter6/mass_sum$ mkdir build

osboxes@osboxes:~/EssentialsOfParallelComputing/Chapter6/mass_sum$ ls

build  CMakeLists.txt  main.c  mass_sum.c  mass_sum.h

osboxes@osboxes:~/EssentialsOfParallelComputing/Chapter6/mass_sum$ cd build/

osboxes@osboxes:~/EssentialsOfParallelComputing/Chapter6/mass_sum/build$ ls

osboxes@osboxes:~/EssentialsOfParallelComputing/Chapter6/mass_sum/build$ cmake ..

_____________________________________________________________________________________________-


-fstrict-aliasing: Habilita el control estricto de aliasing en el código.
-ftree-vectorize: Habilita la vectorización de bucles utilizando el árbol de sintaxis abstracta.
-fopenmp-simd: Habilita la vectorización de bucles utilizando OpenMP SIMD.
-march=native: Genera código para la arquitectura del procesador en el que se está compilando.
-mtune=native: Optimiza el código para la arquitectura del procesador en el que se está compilando.
-ffast-math: Permite el uso de transformaciones de punto flotante que pueden no ser compatibles con el estándar, pero que pueden mejorar el rendimiento.
-fopt-info-vec-all: Genera información sobre todas las operaciones vectoriales realizadas en el código.
-fopt-info-loop-all: Genera información sobre todas las optimizaciones aplicadas a los bucles en el código.



#Parte c
osboxes@osboxes:~/EssentialsOfParallelComputing/Chapter6/mass_sum/build$ nano CMakeLists.txT

-ftree-vectorize: Habilita la vectorización de bucles utilizando el árbol de sintaxis abstracta.
-fopenmp-simd: Habilita la vectorización de bucles utilizando OpenMP SIMD.
-fopt-info-vec-all: Genera información sobre todas las operaciones vectoriales realizadas en el código.


#Parte d
-mprefer-vector-width=512: 
Esta opción se especifica condicionalmente y establece el ancho preferido del vector como 512 bytes si la versión del compilador GCC es mayor que 7.4.0.
